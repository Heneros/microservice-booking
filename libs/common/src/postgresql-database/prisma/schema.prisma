// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model VerifyResetToken {
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}


model User{
  id Int @id @default(autoincrement())
  username String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password String 
  isEmailVerified Boolean @default(false)
  avatarId Int? @unique()
  blocked Boolean @default(false)
  avatar Avatar? @relation(name: "AvatarUser", fields: [avatarId], references: [id], onDelete: Cascade)
  email     String   @unique
  roles     String[] @default(["User"])
  refreshToken    String[]

  token          VerifyResetToken[]
  author Hotel[]

  provider  String? @default("email")

  googleId  String? @unique()
  githubId  String? @unique()
  discordId String? @unique()
}

model Avatar{
  id       Int    @id @default(autoincrement())
  url      String
  publicId String

  userId Int?  @unique()

  user User? @relation(name: "AvatarUser")
  hotel Hotel? @relation(name: "PosterHotel")
  createdAt DateTime @default(now())
}

model Hotel{
    id       Int    @id @default(autoincrement())
    title String @unique()
    description String?
    avgRating Float   @default(0)
    price Int? @default(0)
    category String[]

   author User @relation(fields: [authorId], references: [id])
   authorId    Int 
   rating        Int? @default(0)  

    galleryId  Int?     @unique()
    gallery    Gallery? @relation(name: "GalleryHotel", fields: [galleryId],      references: [id])


    posterId Avatar? @relation(name: "PosterHotel", fields: [avatarId], references: [id], onDelete: Cascade)

    
    avatarId Int? @unique()

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}

model Gallery{
    id Int @id @default(autoincrement())
    url String 
    publicId String 
    hotel Hotel? @relation(name: "GalleryHotel")
}